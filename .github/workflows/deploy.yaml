name: Deploy to Homelab

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"
      - "frontend/**"
      - "infra/Dockerfile"
      - "infra/compose.yaml"
      - "infra/.dockerignore"
      - "package.json"

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Update this to match the image name in your docker-compose.yaml
  IMAGE_NAME: infra-portfolio
  MAX_IMAGES_TO_KEEP: 5

jobs:
  deploy-homelab:
    name: Deploy to Homelab Server
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Build Timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Tag Current Running Image as Backup
        id: backup
        run: |
          # Check if containers are running first
          if docker compose -f infra/compose.yaml ps -q | grep -q .; then
            # Get current image name from compose
            IMAGE_NAME_FROM_COMPOSE=$(docker compose -f infra/compose.yaml config | grep "image:" | head -n 1 | awk '{print $2}')

            if [ -n "$IMAGE_NAME_FROM_COMPOSE" ]; then
              BACKUP_TAG="${IMAGE_NAME}:backup-$(date +%Y%m%d-%H%M%S)"
              docker tag $IMAGE_NAME_FROM_COMPOSE $BACKUP_TAG
              echo "backup_tag=$BACKUP_TAG" >> $GITHUB_OUTPUT
              echo "Created backup tag: $BACKUP_TAG"
            else
              echo "Could not determine current image"
              echo "backup_tag=" >> $GITHUB_OUTPUT
            fi
          else
            echo "No running containers to backup"
            echo "backup_tag=" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Stop Existing Containers
        run: |
          echo "Stopping existing containers..."
          docker compose -f infra/compose.yaml down
        continue-on-error: true

      - name: Build Docker Images
        id: build
        run: |
          echo "Building Docker images with tag: ${{ steps.timestamp.outputs.timestamp }}"
          docker compose -f infra/compose.yaml build

          # Get the built image name from docker compose config
          SERVICE_NAME=$(docker compose -f infra/compose.yaml config --services | head -n 1)
          IMAGE_NAME_FROM_COMPOSE=$(docker compose -f infra/compose.yaml config | grep "image:" | head -n 1 | awk '{print $2}')

          # Tag the newly built image
          if [ -n "$IMAGE_NAME_FROM_COMPOSE" ]; then
            docker tag $IMAGE_NAME_FROM_COMPOSE ${IMAGE_NAME}:${{ steps.timestamp.outputs.timestamp }}
            echo "new_image_tag=${IMAGE_NAME}:${{ steps.timestamp.outputs.timestamp }}" >> $GITHUB_OUTPUT
          else
            echo "Could not determine image name from compose file"
          fi

      - name: Start Containers
        id: deploy
        run: |
          echo "Starting containers..."
          docker compose -f infra/compose.yaml up -d

      - name: Show Container Status
        run: docker compose -f infra/compose.yaml ps

      - name: Wait for Service to Start
        run: sleep 10

      - name: Health Check
        id: health_check
        run: |
          echo "Performing health check on https://willcontact.me..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://willcontact.me)

          if [ "$response" -eq 200 ]; then
            echo "Health check passed! HTTP status: $response"
            exit 0
          else
            echo "Health check failed! HTTP status: $response"
            exit 1
          fi

      - name: Tag Successful Deployment
        if: success()
        run: |
          echo "Tagging successful deployment..."
          IMAGE_NAME_FROM_COMPOSE=$(docker compose -f infra/compose.yaml config | grep "image:" | head -n 1 | awk '{print $2}')

          if [ -n "$IMAGE_NAME_FROM_COMPOSE" ]; then
            docker tag $IMAGE_NAME_FROM_COMPOSE ${IMAGE_NAME}:latest-success
            docker tag $IMAGE_NAME_FROM_COMPOSE ${IMAGE_NAME}:success-$(date +%Y%m%d-%H%M%S)
            echo "Tagged as latest-success"
          fi

      - name: Cleanup Old Images
        if: success()
        run: |
          echo "Cleaning up old images, keeping last $MAX_IMAGES_TO_KEEP..."

          # Get all tagged images sorted by creation date, skip the most recent ones
          docker images ${IMAGE_NAME} --format "{{.ID}}|{{.CreatedAt}}" | \
            sort -t'|' -k2 -r | \
            tail -n +$((MAX_IMAGES_TO_KEEP + 1)) | \
            cut -d'|' -f1 | \
            xargs -r docker rmi -f || true

          echo "Cleanup complete"

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed! Rolling back..."

          # Stop failed containers
          docker compose -f infra/compose.yaml down || true

          # Check if we have a latest-success image
          if docker images ${IMAGE_NAME}:latest-success -q | grep -q .; then
            echo "Rolling back to latest-success image..."

            # Tag the latest-success as the image to use
            docker tag ${IMAGE_NAME}:latest-success ${IMAGE_NAME}:latest

            # Restart with the successful image
            docker compose -f infra/compose.yaml up -d

            echo "Rollback complete. Service restored to last known good state."
          else
            echo "No previous successful deployment found. Manual intervention required."
            exit 1
          fi

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment successful! Site is live at https://willcontact.me"
            echo "Image: ${{ steps.build.outputs.new_image_tag }}"
          else
            echo "Deployment failed and rolled back to previous version"
          fi
